name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build and test
      run: ./gradlew build test
    
    - name: Build student release
      run: ./gradlew studentJar javadocJar sourcesJar
    
    - name: Build teacher release
      run: ./gradlew teacherJar
    
    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}', steps.get_version.outputs.VERSION) }}
        release_name: CoDrone EDU Java v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## üìö CoDrone EDU Java Library v${{ steps.get_version.outputs.VERSION }}
          
          ### üéì For Students
          - **Maven Central**: `edu.codrone:codrone-edu-java:${{ steps.get_version.outputs.VERSION }}`
          - **Direct Download**: `codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-student.jar`
          - **Documentation**: `codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-javadoc.jar`
          
          ### üë®‚Äçüè´ For Teachers
          - **Teacher Edition**: `codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-teacher.jar`
          - **Includes**: MockDrone, DroneTest base classes, testing guides
          
          ### üìñ Usage
          
          #### Students (Maven/Gradle)
          ```xml
          <dependency>
              <groupId>edu.codrone</groupId>
              <artifactId>codrone-edu-java</artifactId>
              <version>${{ steps.get_version.outputs.VERSION }}</version>
          </dependency>
          ```
          
          #### Teachers (Download JAR)
          Download the teacher edition JAR and add to your project classpath for access to testing framework.
          
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'SNAPSHOT') || contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
    
    - name: Upload Student JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/JCoDroneEdu-${{ steps.get_version.outputs.VERSION }}-student.jar
        asset_name: codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-student.jar
        asset_content_type: application/java-archive
    
    - name: Upload Teacher JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/JCoDroneEdu-${{ steps.get_version.outputs.VERSION }}-teacher.jar
        asset_name: codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-teacher.jar
        asset_content_type: application/java-archive
    
    - name: Upload Javadoc JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/JCoDroneEdu-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_name: codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_content_type: application/java-archive
    
    - name: Upload Sources JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libs/JCoDroneEdu-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_name: codrone-edu-java-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_content_type: application/java-archive
    
    # Publish to Maven Central (student edition only)
    - name: Publish to Maven Central
      if: ${{ !contains(steps.get_version.outputs.VERSION, 'SNAPSHOT') }}
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      run: ./gradlew publishStudentPublicationToOSSRHRepository
