package com.otabi.jcodroneedu.protocol.lightcontroller;

import java.util.HashMap;
import java.util.Map;

public enum Colors {
    ALICE_BLUE((byte) 0),
    ANTIQUE_WHITE((byte) 1),
    AQUA((byte) 2),
    AQUAMARINE((byte) 3),
    AZURE((byte) 4),
    BEIGE((byte) 5),
    BISQUE((byte) 6),
    BLACK((byte) 7),
    BLANCHED_ALMOND((byte) 8),
    BLUE((byte) 9),
    BLUE_VIOLET((byte) 10),
    BROWN((byte) 11),
    BURLYWOOOD((byte) 12),
    CADET_BLUE((byte) 13),
    CHARTUESE((byte) 14),
    CHOCOLATE((byte) 15),
    CORAL((byte) 16),
    CORNFLOWER_BLUE((byte) 17),
    CORNSILK((byte) 18),
    CRIMSON((byte) 19),
    CYAN((byte) 20),
    DARK_BLUE((byte) 21),
    DARK_CYAN((byte) 22),
    DARK_GOLDENROD((byte) 23),
    DARK_GREY((byte) 24),
    DARK_GREEN((byte) 25),
    DARK_KHAKI((byte) 26),
    DARK_MAGENTA((byte) 27),
    DARK_OLIVE_GREEN((byte) 28),
    DARK_ORANGE((byte) 29),
    DARK_ORCHID((byte) 30),
    DARK_RED((byte) 31),
    DARK_SALMON((byte) 32),
    DARK_SEA_GREEN((byte) 33),
    DARK_SLATE_BLUE((byte) 34),
    DARK_SLATE_GREY((byte) 35),
    DARK_TURQUOISE((byte) 36),
    DarkViDARK_VIOLET((byte) 37),
    DEEP_PINK((byte) 38),
    DEEP_SKY_BLUE((byte) 39),
    DIM_GREY((byte) 40),
    DODGER_BLUE((byte) 41),
    FIRE_BRICK((byte) 42),
    FLORAL_WHITE((byte) 43),
    FOREST_GREEN((byte) 44),
    FUCSHIA((byte) 45),
    GAINSBORO((byte) 46),
    CHOST_WHITE((byte) 47),
    GOLD((byte) 48),
    GOLDENROD((byte) 49),
    GREY((byte) 50),
    GREEN((byte) 51),
    GREEN_YELLOW((byte) 52),
    HONEYDEW((byte) 53),
    HOT_PINK((byte) 54),
    INDIAN_RED((byte) 55),
    INDIGO((byte) 56),
    IVORY((byte) 57),
    KHAKI((byte) 58),
    LAVENDER((byte) 59),
    LAVENDER_BLUSH((byte) 60),
    LAWN_GREEN((byte) 61),
    LEMON_CHIFFON((byte) 62),
    LIGHT_BLUE((byte) 63),
    LIGHT_CORAL((byte) 64),
    LIGHT_CYAN((byte) 65),
    LIGHT_GOLDENROD_YELLOW((byte) 66),
    LIGHT_GREY((byte) 67),
    LIGHT_GREEN((byte) 68),
    LIGHT_PINK((byte) 69),
    LIGHT_SALMON((byte) 70),
    LIGHT_SEA_GREEN((byte) 71),
    LIGHT_SKY_BLUE((byte) 72),
    LIGHT_SLATE_GREY((byte) 73),
    LIGHT_STEEL_BLUE((byte) 74),
    LIGHT_YELLOW((byte) 75),
    LIME((byte) 76),
    LIME_GREEN((byte) 77),
    LINEN((byte) 78),
    MAGENTA((byte) 79),
    MAROON((byte) 80),
    MEDIUM_AQUAMARINE((byte) 81),
    MEDIUM_BLUE((byte) 82),
    MEDIUM_ORCHID((byte) 83),
    MEDIUM_PURPLE((byte) 84),
    MEDIUM_SEA_GREEN((byte) 85),
    MEDIUM_SLATE_BLUE((byte) 86),
    MEDIUM_SPRING_GREEN((byte) 87),
    MEDIUM_TURQUOISE((byte) 88),
    MEDIUM_VIOLET_RED((byte) 89),
    MIDNIGHT_BLUE((byte) 90),
    MINT_CREAM((byte) 91),
    MINTY_ROSE((byte) 92),
    MOCCASSIN((byte) 93),
    NAVAJO_WHITE((byte) 94),
    NAVY((byte) 95),
    OLD_LACE((byte) 96),
    OLIVE((byte) 97),
    OLIVE_DRAB((byte) 98),
    ORANGE((byte) 99),
    ORANGE_RED((byte) 100),
    ORCHID((byte) 101),
    PALE_GOLDENROD((byte) 102),
    PALE_GREEN((byte) 103),
    PALE_TURQUOISE((byte) 104),
    PALE_VIOLET_RED((byte) 105),
    PAPAYA_WHIP((byte) 106),
    PEACH_PUFF((byte) 107),
    PERU((byte) 108),
    PINK((byte) 109),
    PLUM((byte) 110),
    POWDER_BLUE((byte) 111),
    PURPLE((byte) 112),
    REBECCA_PURPLE((byte) 113),
    RED((byte) 114),
    ROSY_RED((byte) 115),
    ROYAL_BLUE((byte) 116),
    SADDLE_BROWN((byte) 117),
    SALMON((byte) 118),
    SANDY_BROWN((byte) 119),
    SEA_GREEN((byte) 120),
    SEA_SHELL((byte) 121),
    SIENNA((byte) 122),
    SILVER((byte) 123),
    SKY_BLUE((byte) 124),
    SLATE_BLUE((byte) 125),
    SLATE_GREY((byte) 126),
    SNOW((byte) 127),
    SPRING_GREEN((byte) 128),
    STEEL_BLUE((byte) 129),
    TAN((byte) 130),
    TEAL((byte) 131),
    THISTLE((byte) 132),
    TOMATO((byte) 133),
    TURQUOISE((byte) 134),
    VIOLET((byte) 135),
    WHEAT((byte) 136),
    WHITE((byte) 137),
    WHITE_SMOKE((byte) 138),
    YELLOW((byte) 139),
    YELLOW_GREEN((byte) 140);

    private static final Map<Byte, Colors> BYTE_COLORS_MAP =
            new HashMap<>();

    static {
        for (Colors color : Colors.values()) {
            BYTE_COLORS_MAP.put(color.value(), color);
        }
    }

    private final byte color;

    Colors(byte color) {
        this.color = color;
    }

    public byte value() {
        return color;
    }

    public static Colors fromByte(byte b) {
        return BYTE_COLORS_MAP.get(b);
    }
}

